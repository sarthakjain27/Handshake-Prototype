const createEvent = (req, res, pool) => {
  console.log('Inside createEvent module:');
  console.log(req.body);
  const eventName = req.body.eventName.toLowerCase();
  const { description } = req.body;
  const { time, date } = req.body;
  const street = req.body.street.toLowerCase();
  const city = req.body.city.toLowerCase();
  const state = req.body.cstate.toLowerCase();
  const country = req.body.country.toLowerCase();
  const { zipcode } = req.body;

  // storing array of strings which is being stringified and passed
  // so for manipulation would need to parse first.
  const eligibility = req.body.eligibility.toLowerCase();
  const companyId = parseInt(req.body.companyId, 10);

  const insertSQL = `INSERT INTO events_information (event_name, description, date, time, street, city, state, country, zipcode, company_id, eligibility) VALUES ('${eventName}', '${description}', '${date}', '${time}', '${street}', '${city}', '${state}', '${country}', '${zipcode}', '${companyId}', '${eligibility}')`;
  pool.query(insertSQL, (insertError, result) => {
    if (insertError) {
      console.log(insertError);
      console.log('Error in createEvent');
      res.send('Error');
    }
    console.log(`Event titled: ${eventName} created in Table: events_information with Autogenerated ID: ${result.insertId}`);
    res.send(`Event titled: ${eventName} created in Table: events_information with Autogenerated ID: ${result.insertId}`);
  });
};

const listCompanyCreatedEvents = (req, res, pool) => {
  console.log('Inside listCompanyCreatedEvents module:');
  console.log(req.body);
  const companyId = parseInt(req.body.companyId, 10);
  const searchSQL = `SELECT * FROM events_information where company_id = '${companyId}'`;
  pool.query(searchSQL, (searchError, result) => {
    if (searchError) {
      console.log(searchError);
      console.log('Error in listCompanyCreatedEvents');
      res.send('Error');
    }
    res.send(result);
  });
};

const getStudentsRegisteredInAEvent = (req, res, pool) => {
  console.log('Inside getStudentsRegisteredInAEvent');
  console.log(req.body);
  const searchSQL = `select a.event_id,a.student_id,a.studentRegistrationId,
                    b.student_name,b.college_name,b.date_of_birth,b.city,b.state,b.country,b.career_objective,b.contact_phone,b.contact_email,b.profile_picture_url
                    from students_registered_for_event a, student_information b
                    where a.event_id = '${req.body.eventId}'
                    and a.student_id = b.student_id`;

  pool.query(searchSQL, (searchError, searchResult) => {
    if (searchError) {
      console.log(searchError);
      console.log('Error in getStudentsRegisteredInAEvent');
      res.send('Error');
    }
    res.send(searchResult);
  });
};

const getAllEvents = (req, res, pool) => {
  console.log('Inside getAllEvents');
  console.log(req.body);
  const searchSQL = `select b.event_id,b.eligibility,b.event_name,b.description as edescription,b.date,b.time,b.city,b.state,b.country,b.street,b.zipcode,
                    c.company_id,c.company_name,c.description as cdescription,c.contact_phone,c.contact_email,c.profile_picture_url
                    from events_information b,company_information c
                    where b.company_id = c.company_id
                    order by b.date,b.time`;
  pool.query(searchSQL, (searchError, searchResult) => {
    if (searchError) {
      console.log(searchError);
      console.log('Error in getAllEvents');
      res.send('Error');
    }
    res.send(searchResult);
  });
};

const getSearchedEvent = (req, res, pool) => {
  console.log('Inside getSearchedEvent');
  console.log(req.body);
  const searchSQL = `select b.event_id,b.eligibility,b.event_name,b.description as edescription,b.date,b.time,b.city,b.state,b.country,b.street,b.zipcode,
                    c.company_id,c.company_name,c.description as cdescription,c.contact_phone,c.contact_email,c.profile_picture_url
                    from events_information b,company_information c
                    where b.event_name like '%${req.body.eventName}%' and b.company_id = c.company_id
                    order by b.date,b.time`;
  pool.query(searchSQL, (searchError, searchResult) => {
    if (searchError) {
      console.log(searchError);
      console.log('SearchError in getSearchedEvent');
      res.send('Error');
    }
    res.send(searchResult);
  });
};

const registerForEvent = (req, res, pool) => {
  console.log('Inside registerForEvent');
  console.log(req.body);
  const { studentId, eventId } = req.body;
  const searchSQL = `SELECT * FROM students_registered_for_event where event_id='${eventId}' and student_id='${studentId}'`;
  pool.query(searchSQL, (searchError, searchResult) => {
    if (searchError) {
      console.log(searchError);
      console.log('SearchError in registerForEvent');
      res.send('Error');
    } else if (searchResult.length > 0) {
      console.log(`Already applied studentId: ${studentId} and event_id: ${eventId}`);
      res.send('Already applied');
    } else {
      const insertSQL = `INSERT INTO students_registered_for_event (event_id,student_id) VALUES ('${eventId}','${studentId}')`;
      pool.query(insertSQL, (insertError, result) => {
        if (insertError) {
          console.log(insertError);
          console.log('InsertError in registerForEvent');
          res.send('Error');
        }
        console.log(`Student with id ${studentId} successfully registered for event_id ${eventId} with autogenerated id: ${result.insertId}`);
        res.send(`Student with id ${studentId} successfully registered for event_id ${eventId} with autogenerated id: ${result.insertId}`);
      });
    }
  });
};

const getRegisteredEvents = (req, res, pool) => {
  console.log('Inside getRegisteredEvents');
  console.log(req.body);
  const searchSQL = `select a.studentRegistrationId,
                    b.event_id,b.eligibility,b.event_name,b.description as edescription,b.date,b.time,b.city,b.state,b.country,b.street,b.zipcode,
                    c.company_id,c.company_name,c.description as cdescription,c.contact_phone,c.contact_email,c.profile_picture_url
                    from students_registered_for_event a,events_information b,company_information c
                    where a.student_id=${req.body.studentId} and a.event_id = b.event_id and b.company_id = c.company_id
                    order by b.date,b.time`;
  pool.query(searchSQL, (searchError, searchResult) => {
    if (searchError) {
      console.log(searchError);
      console.log('SearchError in getRegisteredEvents');
      res.send('Error');
    }
    res.send(searchResult);
  });
};

exports.createEvent = createEvent;
exports.listCompanyCreatedEvents = listCompanyCreatedEvents;
exports.getAllEvents = getAllEvents;
exports.getRegisteredEvents = getRegisteredEvents;
exports.getSearchedEvent = getSearchedEvent;
exports.registerForEvent = registerForEvent;
exports.getStudentsRegisteredInAEvent = getStudentsRegisteredInAEvent;
